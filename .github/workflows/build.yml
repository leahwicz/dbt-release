name: build dbt
# in the future, we could put most of this (everything except release parsing)
# in the `dbt` repository and use repository_dispatch to trigger it with the
# release information as arguments. Then we could have that build a release,
# etc.

# only run when push to master contains file in /releases dir
on:
  push:
    branches:
      - master
    paths:
      - releases/**
  workflow_dispatch:

jobs:
  test-artifact-schema:
    name: Check for breaking schema changes to dbt artifacts
    runs-on: ubuntu-18.04
    steps:
      - uses: actions/setup-python@v2
        with:
          python-version: "3.8"
      - run: mkdir build && mkdir artifacts
      - uses: actions/checkout@v2
        with:
          fetch-depth: 1
      - name: Check out dbt
        uses: actions/checkout@v2
        with:
          repository: dbt-labs/dbt
  #        ref: ${{ needs.create-commit.outputs.DBT_RELEASE_BRANCH }}
          path: ./build/dbt
      - name: Run check
        run: /bin/bash scripts/script_shim.bash schemas check
  all-tests:
    name: All tests requirement
    needs: [test-artifact-schema]
    runs-on: ubuntu-18.04
    steps:
      - name: All tests passed
        run: echo "All tests passed"
  publish-artifact-schema:
    name: Upload schemas for dbt artifacts
    runs-on: ubuntu-18.04
    steps:
      - uses: actions/setup-python@v2
        with:
          python-version: "3.8"
      - run: mkdir build && mkdir artifacts
      - uses: actions/checkout@v2
        with:
          fetch-depth: 1
      - name: Check out dbt
        uses: actions/checkout@v2
        with:
          repository: dbt-labs/dbt
  #        ref: ${{ needs.create-commit.outputs.DBT_RELEASE_BRANCH }}
          path: ./build/dbt
      - name: Publish schemas to schemas.getdbt.com
        run: /bin/bash scripts/script_shim.bash schemas publish
 
